<%
  let speedo_size = 60;
  let item_size = 5;
  let gap = 12;

  let total_speedo_size = speedo_size * speedometers.len();
  let total_item_size = item_size * items.len();
  let total_height = total_speedo_size + gap + total_item_size;
%>

<svg version="1.1" viewBox="0 0 100 <%= total_height %>"
     role="graphics-object"
     xmlns="http://www.w3.org/2000/svg">
  <style>
    text {
      font-family: 'Ubuntu Mono', monospace;
    }
  </style>

  <%
  for (i, speedo) in speedometers.into_iter().enumerate() {
    let step = speedo.step.unwrap_or(10.0);
    let tick_count = ((speedo.max - speedo.min) / step).floor() as usize;
    let main_ticks = (0..=tick_count).map(|i| i as f32 * 180.0 / tick_count as f32).collect::<Vec<f32>>();
    let mini_ticks = (0..=tick_count * step as usize).map(|i| i as f32 * 180.0 / (tick_count * step as usize) as f32).collect::<Vec<f32>>();
    let redline_threshold = speedo.redline_threshold_pct.unwrap_or(0.8);
    let pos = speedo_size * i;
    %>
    <g>
      <% for (i, degrees) in mini_ticks.iter().enumerate() { %>
        <line
          x1="50"
          y1="<%= pos + 10 %>"
          x2="50"
          y2="<%= pos + 15 %>"
          stroke="<%= if i as f32 / mini_ticks.len() as f32 > redline_threshold {"red"} else {speedo.mini_tick_color.as_deref().unwrap_or("grey")} %>"
          stroke-width="0.25"
          transform="rotate(<%= degrees - 90.0 %> 50 <%= pos + 50 %>)"
        />
      <% } %>

      <% for (i, degrees) in main_ticks.iter().enumerate() { %>
        <line
          x1="50"
          y1="<%= pos + 10 %>"
          x2="50"
          y2="<%= pos + 20 %>"
          stroke="<%= if i as f32 / main_ticks.len() as f32 > redline_threshold {"red"} else {speedo.main_tick_color.as_deref().unwrap_or("white")} %>"
          stroke-width="0.5"
          transform="rotate(<%= degrees - 90.0 %> 50 <%= pos + 50 %>)"
        />
      <% } %>

      <path
        d="M 10 <%= pos + 50 %> A 40 40 0 0 1 90 <%= pos + 50 %>"
        fill="none"
        stroke="<%= speedo.arc_color.as_deref().unwrap_or("white") %>"
        stroke-width="1"
      />

      <% let pos_f32 = pos as f32; %>
      <polygon
        points="15,<%= pos_f32 + 49.75 %> 15,<%= pos_f32 + 50.25 %> 50,<%= pos_f32 + 51.25 %> 50,<%= pos_f32 + 48.75 %>"
        fill="<%= speedo.needle_color.as_deref().unwrap_or("red") %>"
        transform="rotate(<%= ((speedo.value - speedo.min) / (speedo.max - speedo.min)) * 180.0 %> 50 <%= pos + 50 %>)"
      />

      <text x="50" y="<%= pos + 42 %>" fill="<%= speedo.title_color.as_deref().unwrap_or("white") %>" font-size="5" text-anchor="middle">
        <%= speedo.title %>
      </text>

      <% for (i, degrees) in main_ticks.iter().enumerate() { %>
        <text
          x="50"
          y="<%= pos + 30 %>"
          fill="<%= if i as f32 / main_ticks.len() as f32 > redline_threshold {"red"} else {speedo.tick_label_color.as_deref().unwrap_or("white")} %>"
          font-size="4"
          text-anchor="middle"
          transform="rotate(<%= degrees - 90.0 %> 50 <%= pos + 50 %>) translate(0, -5)"
        >
          <%= ((degrees / 180.0) * (speedo.max - speedo.min) + speedo.min).round() as usize %>
        </text>
      <% } %>

      <text x="50" y="<%= pos + 60 %>" fill="white" font-size="6" text-anchor="middle">
        <%= format_float(speedo.value, !speedo.format_as_float.unwrap_or(false)) %><%= speedo.units %>
      </text>
    </g>
  <% } %>

  <% for (i, item) in items.into_iter().enumerate() {
    let pos = total_speedo_size + gap + i * item_size;
    let pos_f32 = pos as f32;
    match item {
      Item::Title(title) => {
          %>
          <text x="2" y="<%= pos %>" fill="grey" font-size="3" text-anchor="start"><%= title %></text>
          <line x1="2" y1="<%= pos_f32 + 0.5 %>" x2="98" y2="<%= pos_f32 + 0.5 %>" stroke="grey" stroke-width="0.15" />
          <%
      }
      Item::Datum { label, value, color } => {
          %>
          <text x="5" y="<%= pos %>" fill="<%= color.as_deref().unwrap_or("white") %>" font-size="3.5" text-anchor="start"><%= label %></text>
          <text x="98" y="<%= pos %>" fill="<%= color.as_deref().unwrap_or("white") %>" font-size="3.5" text-anchor="end"><%= value %></text>
          <%
      }
    }
  } %>
</svg>
